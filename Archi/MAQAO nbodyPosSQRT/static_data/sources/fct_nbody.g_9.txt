/home/katia/Archi/nbodyPosSQRT.c: 75 - 167
--------------------------------------------------------------------------------

75: i = 0x5f3759df - (i>>1); // gives initial guess y0
76: x = *(float*)&i; // convert bits back to float
77: x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
78: return x;
79: }
80: 
81: void move_particles(particle_t *p, const f32 dt, u64 n)
82: {
83:   //
84:   const f32 softening = 1e-20;
85: 
86:   //
87:   f32 fx = 0.0;
88:   f32 fy = 0.0;
89:   f32 fz = 0.0;
90: 
91:   //
92:   for (u64 i = 0; i < n; i++)
93:     {
94:       //
95:       int pxi = p->x[i];
96:       int pyi = p->y[i];
97:       int pzi = p->z[i];
98:     
99:       //23 floating-point operations
100:       for (u64 j = 0; j < n; j++)
101: 	{
102: 	  //Newton's law
103:       
104:         const f32 dx = p->x[j] - pxi; //1
105:         const f32 dy = p->y[j] - pyi; //2
106:         const f32 dz = p->z[j] - pzi; //3
107:       
108:         const f32 d_2 = (dx * dx) + (dy * dy) + (dz * dz) + softening; //9
109:         const f32 d_sq = InvSqrt(d_2); //11
110:         const f32 d_3_over_2 = d_sq * d_sq * d_sq; //13
111: 
112: 	  //Net force
113: 	    fx += dx * d_3_over_2; //15
114: 	    fy += dy * d_3_over_2; //17
115: 	    fz += dz * d_3_over_2; //19
116: 	}
117: 
118:       //
119:       p->vx[i] += dt * fx;//21
120:       p->vy[i] += dt * fy;//23
121:       p->vz[i] += dt * fz;//25
[...]
127:   for (u64 i = 0; i < n; i+=9)
128:     {
129:       p->x[i] += dt * p->vx[i];
130:       p->y[i] += dt * p->vy[i];
131:       p->z[i] += dt * p->vz[i];
132:       
133:       p->x[i+1] += dt * p->vx[i+1];
134:       p->y[i+1] += dt * p->vy[i+1];
135:       p->z[i+1] += dt * p->vz[i+1];
136:       
137:       p->x[i+2] += dt * p->vx[i+2];
138:       p->y[i+2] += dt * p->vy[i+2];
139:       p->z[i+2] += dt * p->vz[i+2];
140:       
141:       p->x[i+3] += dt * p->vx[i+3];
142:       p->y[i+3] += dt * p->vy[i+3];
143:       p->z[i+3] += dt * p->vz[i+3];
144:       
145:       p->x[i+4] += dt * p->vx[i+4];
146:       p->y[i+4] += dt * p->vy[i+4];
147:       p->z[i+4] += dt * p->vz[i+4];
148:       
149:       p->x[i+5] += dt * p->vx[i+5];
150:       p->y[i+5] += dt * p->vy[i+5];
151:       p->z[i+5] += dt * p->vz[i+5];
152:       
153:       p->x[i+6] += dt * p->vx[i+6];
154:       p->y[i+6] += dt * p->vy[i+6];
155:       p->z[i+6] += dt * p->vz[i+6];
156:       
157:       p->x[i+7] += dt * p->vx[i+7];
158:       p->y[i+7] += dt * p->vy[i+7];
159:       p->z[i+7] += dt * p->vz[i+7];
160:       
161:       p->x[i+8] += dt * p->vx[i+8];
162:       p->y[i+8] += dt * p->vy[i+8];
163:       p->z[i+8] += dt * p->vz[i+8];
164: 
165:       
166:     }
167: }
